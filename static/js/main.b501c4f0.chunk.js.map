{"version":3,"sources":["bg2.png","logo.svg","mylogo.jpg","uulogo.png","components/Navbar.js","components/Main2.js","components/Home.js","components/SearchEntity.js","components/List.js","components/Main.js","components/Search.js","components/Main3.js","components/Add.js","App.js","components/Search2.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","this","props","account","Component","Main2","state","dataCount","datas","loading","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","myaccount","setState","net","getId","networkId","networkData","AddData","networks","adddata","Contract","abi","address","methods","call","i","data","scope","map","key","toString","identity","jsonvalue","publickey","class","src","mylogo","alt","width","height","uulogo","SearchEntity","txtSearch","title","value","document","getElementById","innerHTML","placeholder","ref","input","onClick","search","Main","onSubmit","event","preventDefault","createData","required","App","bind","send","from","once","receipt","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,iC,0DCA3CD,EAAOC,QAAU,IAA0B,kC,yMCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,gdC2C5BC,G,6KApCX,OACI,yBAAKC,UAAU,uEACrB,0BAAMA,UAAU,uCACR,0BAAMA,UAAU,UAAhB,8BAER,4BAAQA,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,cAAcC,gBAAc,aAAaC,gBAAc,QAAQC,aAAW,qBAC5J,0BAAMN,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BO,GAAG,cAC3C,wBAAIP,UAAU,iCACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMQ,GAAG,IAAIR,UAAU,YAAvB,OAAsC,0BAAMA,UAAU,WAAhB,eAExC,wBAAIA,UAAU,YACX,kBAAC,IAAD,CAAMQ,GAAG,OAAOR,UAAU,YAA1B,mBAEF,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMQ,GAAG,UAAUR,UAAU,YAA7B,qBAEF,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMQ,GAAG,QAAQR,UAAU,YAA3B,uBAGL,0BAAMA,UAAU,eACb,wBAAIA,UAAU,mBACX,wBAAIA,UAAU,oDACZ,2BAAOA,UAAU,cAAa,0BAAMA,UAAU,QAAhB,eAA9B,IAAwE,0BAAMO,GAAG,WAAWE,KAAKC,MAAMC,mB,GA7B9FC,c,oDCuGNC,GC/FGD,Y,kDD0ChB,WAAYF,GAAQ,IAAD,8BACjB,cAAMA,IACDI,MAAQ,CACXH,QAAS,GACTI,UAAW,EACXC,MAAO,GACPC,SAAS,GANM,E,2LA3CXR,KAAKS,W,uBACLT,KAAKU,qB,qPAIPC,OAAOC,S,uBACTD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,U,SACxBD,OAAOC,SAASG,S,6BAEfJ,OAAOE,KACdF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKG,iBAGnCL,OAAOM,MAAM,uE,mRAKTJ,EAAOF,OAAOE,K,SAEGA,EAAKK,IAAIC,c,cAA1BC,E,OACAC,EAAUD,EAAS,GACzBpB,KAAKsB,SAAS,CAAEpB,QAAUmB,I,SACFR,EAAKK,IAAIK,IAAIC,Q,UAA/BC,E,SACAC,EAAcC,EAAQC,SAASH,I,wBAE7BI,EAAUhB,EAAKK,IAAIY,SAASH,EAAQI,IAAKL,EAAYM,SAC3DhC,KAAKsB,SAAS,CAAEO,Y,UACQA,EAAQI,QAAQ3B,YAAY4B,O,QAA9C5B,E,OACNN,KAAKsB,SAAS,CAAEhB,cAEP6B,EAAI,E,aAAGA,GAAK7B,G,kCACAuB,EAAQI,QAAQ1B,MAAM4B,GAAGD,O,QAAtCE,E,OACNpC,KAAKsB,SAAS,CACZf,MAAM,GAAD,mBAAMP,KAAKK,MAAME,OAAjB,CAAwB6B,M,QAHDD,I,wBAMhCnC,KAAKsB,SAAS,CAAEd,SAAS,I,wBAEzBG,OAAOM,MAAM,kD,uJAmBZ,OACD,yBAAKnB,GAAG,WACA,mCACN,wBAAIP,UAAU,UAAd,gBACA,yBAAKA,UAAU,QACf,2BAAOA,UAAU,uBAAuBO,GAAG,WACzC,+BACE,4BACE,wBAAIuC,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,gBAGJ,2BAAOvC,GAAG,eACNE,KAAKC,MAAMM,MAAM+B,KAAI,SAACF,EAAMG,GAC5B,OACE,wBAAIA,IAAKA,GACP,wBAAIF,MAAM,OAAOD,EAAKtC,GAAG0C,YACxB,4BAAKJ,EAAKK,SAASD,YACpB,4BAAKJ,EAAKM,WACV,4BAAKN,EAAKO,kBAOrB,yBAAKC,MAAM,UACZ,yBAAKC,IAAKC,IAAQC,IAAI,GAAGC,MAAM,MAAMC,OAAO,OAC5C,yBAAKJ,IAAKK,IAAQH,IAAI,GAAGC,MAAM,MAAMC,OAAO,c,GA5F9B9C,cE8FLgD,GC7FGhD,Y,kDD8ChB,WAAYF,GAAQ,IAAD,8BACjB,cAAMA,IACDI,MAAQ,CACXH,QAAS,GACTI,UAAW,EACXC,MAAO,GACPC,SAAS,GANM,E,2LA3CXR,KAAKS,W,uBACLT,KAAKU,qB,qPAIPC,OAAOC,S,uBACTD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,U,SACxBD,OAAOC,SAASG,S,6BAEfJ,OAAOE,KACdF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKG,iBAGnCL,OAAOM,MAAM,uE,mRAKTJ,EAAOF,OAAOE,K,SAEGA,EAAKK,IAAIC,c,cAA1BC,E,OACAC,EAAUD,EAAS,GACzBpB,KAAKsB,SAAS,CAAEpB,QAAUmB,I,SACFR,EAAKK,IAAIK,IAAIC,Q,UAA/BC,E,SACAC,EAAcC,EAAQC,SAASH,I,wBAE7BI,EAAUhB,EAAKK,IAAIY,SAASH,EAAQI,IAAKL,EAAYM,SAC3DhC,KAAKsB,SAAS,CAAEO,Y,UACQA,EAAQI,QAAQ3B,YAAY4B,O,QAA9C5B,E,OACNN,KAAKsB,SAAS,CAAEhB,cAEP6B,EAAI,E,aAAGA,GAAK7B,G,kCACAuB,EAAQI,QAAQ1B,MAAM4B,GAAGD,O,QAAtCE,E,OACNpC,KAAKsB,SAAS,CACZf,MAAM,GAAD,mBAAMP,KAAKK,MAAME,OAAjB,CAAwB6B,M,QAHDD,I,wBAMhCnC,KAAKsB,SAAS,CAAEd,SAAS,I,wBAEzBG,OAAOM,MAAM,kD,qJAmBVmC,GAEN,IAAIC,EAAQrD,KAAKqD,MAAMC,MAChBtD,KAAKC,MAAMM,MAAM+B,KAAI,SAACF,EAAMG,GAC9Bc,IAAQjB,EAAKK,SAASD,aACnBe,SAASC,eAAe,aAAaC,UAAWrB,EAAKM,gB,+BAMpD,IAAD,OACH,OACA,yBAAK5C,GAAG,WACV,yBAAKP,UAAU,kBACf,2BAAOC,KAAK,OAAOkE,YAAY,uBAAuBnE,UAAU,eAAeO,GAAG,YAAY6D,IAAK,SAAAC,GAAK,OAAI,EAAKP,MAAQO,KACxH,4BAAQrE,UAAU,8BAA8BsE,QAAS,kBAAI,EAAKC,OAAO,EAAK7D,MAAMM,SAApF,UAGD,yCACD,uBAAGT,GAAG,YAAYP,UAAU,WAA5B,eAEA,yBAAKqD,MAAM,gBACV,yBAAKC,IAAKC,IAAQC,IAAI,GAAGC,MAAM,MAAMC,OAAO,OAC5C,yBAAKJ,IAAKK,IAAQH,IAAI,GAAGC,MAAM,MAAMC,OAAO,c,GAtFvB9C,cEoCZ4D,GCnCM5D,Y,uKDFT,IAAD,OACP,OACE,yBAAKL,GAAG,WAER,wBAAIP,UAAU,gBAAd,kBACE,0BAAMyE,SAAU,SAACC,GACfA,EAAMC,iBACN,IAAMxB,EAAY,EAAKA,UAAUY,MAC3Bb,EAAW,EAAKA,SAASa,MAC/B,EAAKrD,MAAMkE,WAAWzB,EAAWD,KAE/B,yBAAKlD,UAAU,mBACf,2BACEO,GAAG,WACHN,KAAK,OACLmE,IAAK,SAACC,GAAY,EAAKnB,SAAWmB,GAClCrE,UAAU,eACVmE,YAAY,WACZU,UAAQ,KAEZ,yBAAK7E,UAAU,mBACb,8BACEO,GAAG,YACHN,KAAK,OACLmE,IAAK,SAACC,GAAY,EAAKlB,UAAYkB,GACnCrE,UAAU,eACVmE,YAAY,aACZU,UAAQ,KAEZ,4BAAQ5E,KAAK,SAASD,UAAU,qBAAhC,kB,GA/BSY,cEoBJC,GCdGD,Y,uKDJX,OACC,yBAAKL,GAAG,WACJ,yBAAKP,UAAU,kBACf,yCACAS,KAAKC,MAAMM,MAAM+B,KAAI,SAACF,EAAMG,GAC1B,OACE,0BAAMA,IAAKA,GACR,uBAAGzC,GAAG,YAAYP,UAAU,WAAW6C,EAAKM,qB,GAT3CvC,cE+FLkE,GC3FGlE,Y,kDDoDhB,WAAYF,GAAQ,IAAD,8BACjB,cAAMA,IACDI,MAAQ,CACXH,QAAS,GACTI,UAAW,EACXC,MAAO,GACPC,SAAS,GAGX,EAAK2D,WAAa,EAAKA,WAAWG,KAAhB,gBATD,E,2LA3CXtE,KAAKS,W,uBACLT,KAAKU,qB,qPAIPC,OAAOC,S,uBACTD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,U,SACxBD,OAAOC,SAASG,S,6BAEfJ,OAAOE,KACdF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKG,iBAGnCL,OAAOM,MAAM,uE,mRAKTJ,EAAOF,OAAOE,K,SAEGA,EAAKK,IAAIC,c,cAA1BC,E,OACAC,EAAUD,EAAS,GACzBpB,KAAKsB,SAAS,CAAEpB,QAAUmB,I,SACFR,EAAKK,IAAIK,IAAIC,Q,UAA/BC,E,SACAC,EAAcC,EAAQC,SAASH,I,wBAE7BI,EAAUhB,EAAKK,IAAIY,SAASH,EAAQI,IAAKL,EAAYM,SAC3DhC,KAAKsB,SAAS,CAAEO,Y,UACQA,EAAQI,QAAQ3B,YAAY4B,O,QAA9C5B,E,OACNN,KAAKsB,SAAS,CAAEhB,cAEP6B,EAAI,E,aAAGA,GAAK7B,G,kCACAuB,EAAQI,QAAQ1B,MAAM4B,GAAGD,O,QAAtCE,E,OACNpC,KAAKsB,SAAS,CACZf,MAAM,GAAD,mBAAMP,KAAKK,MAAME,OAAjB,CAAwB6B,M,QAHDD,I,wBAMhCnC,KAAKsB,SAAS,CAAEd,SAAS,I,wBAEzBG,OAAOM,MAAM,kD,yJAiBNyB,EAAWD,GAAW,IAAD,OAC9BzC,KAAKsB,SAAS,CAAEd,SAAS,IACzBR,KAAKK,MAAMwB,QAAQI,QAAQkC,WAAWzB,EAAWD,GAAU8B,KAAK,CAAEC,KAAMxE,KAAKK,MAAMH,UAClFuE,KAAK,WAAW,SAACC,GAChB,EAAKpD,SAAS,CAAEd,SAAS,S,+BAQ7B,OACG,6BAEG,kBAAC,IAAD,KACA,6BACG,kBAAC,EAAD,CAAQN,QAASF,KAAKK,MAAMH,iB,GA5ErBC,cEFEwE,QACW,cAA7BhE,OAAOiE,SAASC,UAEe,UAA7BlE,OAAOiE,SAASC,UAEhBlE,OAAOiE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAASC,eAAe,SD6H3C,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b501c4f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg2.0b1490dd.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/mylogo.b0d6fa00.jpg\";","module.exports = __webpack_public_path__ + \"static/media/uulogo.0f04b257.png\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './App.css';\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n        <nav className=\"navbar navbar-expand-lg fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n  <span className=\"navbar-brand col-sm-3 col-md-2 mr-0\">       \n          <span className=\"title1\">Secure Software Ecosystem</span>\n        </span>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n  <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n    <ul className=\"navbar-nav mr-auto marginleft\">\n      <li className=\"nav-item active\">        \n        <Link to=\"/\" className=\"nav-link\">Home<span className=\"sr-only\">(current)</span></Link>\n      </li>\n      <li className=\"nav-item\">        \n         <Link to=\"/Add\" className=\"nav-link\">Add new entity</Link>\n      </li>\n       <li className=\"nav-item\">        \n         <Link to=\"/Search\" className=\"nav-link\">Search an entity</Link>\n      </li>\n       <li className=\"nav-item\">        \n         <Link to=\"/List\" className=\"nav-link\">Show all entities</Link>\n      </li>\n          </ul>\n    <span className=\"navbar-text\">\n       <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-white\"><span className=\"bold\">Public Key:</span> <span id=\"account\">{this.props.account}</span></small>\n          </li>          \n        </ul>\n    </span>\n  </div>\n</nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\n\nimport Web3 from 'web3';\nimport AddData from '../abis/AddData.json';\nimport mylogo from '../mylogo.jpg';\nimport uulogo from '../uulogo.png';\n\nclass Main2 extends Component {\n\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true\n    }\n\n   \n   \n  }\n\n\n  render() {\n       return (\n      <div id=\"content\">\n              <p>&nbsp;</p>\n        <h5 className=\"center\">All Entities</h5>\n        <div className=\"list\">\n        <table className=\"table table-bordered\" id=\"tbllist\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Identity</th>\n              <th scope=\"col\">Json Value</th>\n              <th scope=\"col\">Public Key</th>\n                  </tr>\n          </thead>\n          <tbody id=\"productList\">\n            { this.props.datas.map((data, key) => {\n              return(\n                <tr key={key}>\n                  <th scope=\"row\">{data.id.toString()}</th>\n                   <td>{data.identity.toString()}</td>\n                  <td>{data.jsonvalue}</td>\n                  <td>{data.publickey}</td>\n                  </tr>\n              )\n            })}\n          </tbody>\n        </table>\n        </div>\n       <div class=\"footer\">\n      <img src={mylogo} alt=\"\" width=\"200\" height=\"61\"/>\n      <img src={uulogo} alt=\"\" width=\"200\" height=\"104\"/>\n     </div>\n      </div>\n       );\n  }\n}\n\n\nexport default Main2;\n","import React, { Component } from 'react';\nimport Web3 from 'web3'\n\nimport './App.css';\nimport AddData from '../abis/AddData.json'\nimport Navbar from './Navbar'\n\nimport bg1 from '../bg2.png';\nimport mylogo from '../mylogo.jpg';\nimport uulogo from '../uulogo.png';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true\n    }\n\n    this.createData = this.createData.bind(this)\n   \n  }\n\n  createData(jsonvalue, identity) {\n    this.setState({ loading: true })\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n         <img src={bg1} alt=\"\" className=\"bg\"/>\n           <div className=\"form\">\n           <p className=\"font\">SecureSECO Ledger - is a distributed ledger maintained by its participants, consisting of software engineers, software producing organizations, and academic partners. SecureSECO stores data about a software’s lifecycle, from source code to executable, with the goal of increasing trust in the worldwide software ecosystem.\n            SecureSECO participants maintain the network, by running clients that perform node confirmations. </p>\n            <p className=\"font\">\n            The underlying structure of SecureSECO is a Merkle Directed Acyclic Graph, i.e., where each node is a hashed increment of its parents. Nodes are confirmed by participants in the network. The data is stored in a distributed manner, using a platform-agnostic approach. Currently, the platforms on which data is stored are trusted third parties (Utrecht University, SurfSARA, AWS, later also DANS)\n             and these data are replicated amongst clients.\n            </p>\n            <Link to=\"/Add\" className=\"btn btn-info form linkbutton\">Add new entity</Link>\n            <Link to=\"/Search\" className=\"btn btn-info form linkbutton\">Search an entity</Link>\n            <Link to=\"/List\" className=\"btn btn-info form linkbutton\">Show all entities</Link>\n            </div>\n           <div className=\"footer\">\n      <img src={mylogo} alt=\"\" width=\"200\" height=\"61\"/>\n      <img src={uulogo} alt=\"\" width=\"200\" height=\"104\"/>\n     </div>\n          </div>\n     );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nimport Web3 from 'web3';\nimport AddData from '../abis/AddData.json';\nimport mylogo from '../mylogo.jpg';\nimport uulogo from '../uulogo.png';\n\nclass SearchEntity extends Component {\n\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true\n    }\n\n   \n   \n  }\n\n\n\n  search(txtSearch)\n{  \n   var title = this.title.value;\n    var a=this.props.datas.map((data, key) => {\n    if (title===data.identity.toString()) {\n           document.getElementById(\"txtResult\").innerHTML= data.jsonvalue;\n                 }                     \n            })\n }\n\n\n  render() {\n        return (\n        <div id=\"content\">\n      <div className=\"form searchBox\">      \n      <input type=\"text\" placeholder=\"Search identity.... \" className=\"form-control\" id=\"txtSearch\" ref={input => this.title = input}/>\n       <button className=\"btn btn-info form btnSearch\" onClick={()=>this.search(this.props.datas)}>\n      Search\n    </button>\n      <p>json file:</p>\n     <p id=\"txtResult\" className=\"resualt\">No Data...</p>\n     </div>\n     <div class=\"footer fixed\">\n      <img src={mylogo} alt=\"\" width=\"200\" height=\"61\"/>\n      <img src={uulogo} alt=\"\" width=\"200\" height=\"104\"/>\n     </div>\n            </div>\n        );\n  }\n}\n\n\nexport default SearchEntity;\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\n\r\nimport './App.css';\r\nimport AddData from '../abis/AddData.json';\r\nimport Navbar from './Navbar';\r\nimport Main from './Main2';\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    const myaccount=accounts[0]\r\n    this.setState({ account:  myaccount })\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = AddData.networks[networkId]\r\n    if(networkData) {\r\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\r\n      this.setState({ adddata })\r\n      const dataCount = await adddata.methods.dataCount().call()\r\n      this.setState({ dataCount })\r\n      // Load datas\r\n      for (var i = 1; i <= dataCount; i++) {\r\n        const data = await adddata.methods.datas(i).call()\r\n        this.setState({\r\n          datas: [...this.state.datas, data]\r\n        })\r\n      }\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('The contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      dataCount: 0,\r\n      datas: [],\r\n      loading: true\r\n    }\r\n\r\n    this.createData = this.createData.bind(this)\r\n   \r\n  }\r\n\r\n  createData(jsonvalue, identity) {\r\n    this.setState({ loading: true })\r\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\r\n              { this.state.loading\r\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                : <Main\r\n                  datas={this.state.datas}\r\n                  />\r\n              }\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\n\n\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div id=\"content\">\n        \n      <h3 className=\"title center\">Add New Entity</h3>\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          const jsonvalue = this.jsonvalue.value\n          const identity = this.identity.value\n          this.props.createData(jsonvalue, identity)\n        }}>\n            <div className=\"form-group form\">\n            <input\n              id=\"identity\"\n              type=\"text\"\n              ref={(input) => { this.identity = input }}\n              className=\"form-control\"\n              placeholder=\"Identity\"\n              required />\n          </div>\n          <div className=\"form-group form\">\n            <textarea \n              id=\"jsonvalue\"\n              type=\"text\"\n              ref={(input) => { this.jsonvalue = input }}\n              className=\"form-control\"\n              placeholder=\"Json Value\"\n              required />\n          </div>\n          <button type=\"submit\" className=\"btn btn-info form\">Add Data</button>\n        </form>\n       \n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\n\r\nimport './App.css';\r\nimport AddData from '../abis/AddData.json';\r\nimport Navbar from './Navbar';\r\nimport Main from './SearchEntity';\r\n\r\nclass Search extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    const myaccount=accounts[0]\r\n    this.setState({ account:  myaccount })\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = AddData.networks[networkId]\r\n    if(networkData) {\r\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\r\n      this.setState({ adddata })\r\n      const dataCount = await adddata.methods.dataCount().call()\r\n      this.setState({ dataCount })\r\n      // Load datas\r\n      for (var i = 1; i <= dataCount; i++) {\r\n        const data = await adddata.methods.datas(i).call()\r\n        this.setState({\r\n          datas: [...this.state.datas, data]\r\n        })\r\n      }\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('The contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      dataCount: 0,\r\n      datas: [],\r\n      loading: true\r\n    }\r\n\r\n    this.createData = this.createData.bind(this)\r\n   \r\n  }\r\n\r\n  createData(jsonvalue, identity) {\r\n    this.setState({ loading: true })\r\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\r\n              { this.state.loading\r\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                : <Main\r\n                  datas={this.state.datas}\r\n                    />\r\n              }\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\n\n\n\nclass Main2 extends Component {\n  render() {\n       return (\n        <div id=\"content\">\n            <div className=\"form searchBox\">\n            <p>json file:</p>\n          { this.props.datas.map((data, key) => {\n              return(\n                <span key={key}>\n                   <p id=\"txtResult\" className=\"resualt\">{data.jsonvalue}</p>                                       \n                </span>\n              )\n            })}\n     </div>\n          </div>\n        );\n  }\n}\n\n\nexport default Main2;\n","import React, { Component } from 'react';\nimport Web3 from 'web3'\n\nimport './App.css';\nimport AddData from '../abis/AddData.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport mylogo from '../mylogo.jpg';\nimport uulogo from '../uulogo.png';\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true\n    }\n\n    this.createData = this.createData.bind(this)\n   \n  }\n\n  createData(jsonvalue, identity) {\n    this.setState({ loading: true })\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\n              { this.state.loading\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\n                : <Main\n                 \n                  createData={this.createData}\n                   />\n              }\n            </main>\n          </div>\n        </div>\n         <div class=\"footer fixed\">\n      <img src={mylogo} alt=\"\" width=\"200\" height=\"61\"/>\n      <img src={uulogo} alt=\"\" width=\"200\" height=\"104\"/>\n     </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport { Component } from 'react';\nimport AddData from './abis/AddData.json';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport List from './components/List';\nimport Search from './components/Search';\nimport Add from './components/Add';\nimport Search2 from './components/Search2';\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true\n    }\n\n    this.createData = this.createData.bind(this)\n   \n  }\n\n  createData(jsonvalue, identity) {\n    this.setState({ loading: true })\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n\n\n\nrender() {\n  return (\n     <div>\n       \n        <BrowserRouter>\n        <div>\n           <Navbar account={this.state.account} />\n             \n        </div> \n      </BrowserRouter>\n      </div>\n  );\n}\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\n\r\nimport './App.css';\r\nimport AddData from '../abis/AddData.json';\r\nimport Navbar from './Navbar';\r\nimport Main from './Main3';\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    const myaccount=accounts[0]\r\n    this.setState({ account:  myaccount })\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = AddData.networks[networkId]\r\n    if(networkData) {\r\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\r\n      this.setState({ adddata })\r\n      const dataCount = await adddata.methods.dataCount().call()\r\n      this.setState({ dataCount })\r\n      // Load datas\r\n      // for (var i = 1; i <= dataCount; i++) {\r\n      //   const data = await adddata.methods.datas(i).call()\r\n      //   this.setState({\r\n      //     datas: [...this.state.datas, data]\r\n      //   })\r\n      // }\r\n      // this.setState({ loading: false})\r\n    } else {\r\n      window.alert('The contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      dataCount: 0,\r\n      datas: [],\r\n      loading: true\r\n    }\r\n\r\n    this.createData = this.createData.bind(this)\r\n   \r\n  }\r\n\r\n  createData(jsonvalue, identity) {\r\n    this.setState({ loading: true })\r\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n\r\n  async search(){\r\n\r\n    var title = this.title.value;\r\n\r\n   \r\n       const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    const myaccount=accounts[0]\r\n    this.setState({ account:  myaccount })\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = AddData.networks[networkId]\r\n    if(networkData) {\r\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\r\n      this.setState({ adddata })\r\n      const dataCount = await adddata.methods.dataCount().call()\r\n      this.setState({ dataCount })\r\n      //Load datas\r\n      this.setState({datas: []});\r\n      for (var i = 1; i <= dataCount; i++) {\r\n        const data = await adddata.methods.datas(i).call()\r\n\r\n        \r\n        if (data.identity===title) {\r\n          this.setState({\r\n          datas: [...this.state.datas, data]\r\n        })\r\n\r\n        }\r\n        \r\n\r\n        \r\n      }\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('Marketplace contract not deployed to detected network.')\r\n    }\r\n  \r\n  \r\n}\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n          <div className=\"form searchBox\">\r\n            <input type=\"text\" placeholder=\"Search identity.... \" className=\"form-control\" id=\"txtSearch\" ref={input => this.title = input}/>\r\n       <button className=\"btn btn-info form btnSearch\" onClick={()=>this.search()}>\r\n      Search\r\n    </button>\r\n      </div>\r\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\r\n              { this.state.loading\r\n                ? <div id=\"loader\" className=\"text-center\"></div>\r\n                : <Main\r\n                  datas={this.state.datas}\r\n                                    />\r\n              }\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}