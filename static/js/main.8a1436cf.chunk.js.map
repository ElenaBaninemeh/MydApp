{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","account","dataCount","datas","loading","createData","bind","this","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","myaccount","setState","net","getId","networkId","networkData","AddData","networks","adddata","Contract","abi","address","methods","call","i","data","jsonvalue","identity","send","from","once","receipt","className","src","logo","alt","href","target","rel","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ik1DAAAA,EAAOC,QAAU,IAA0B,kC,4rBCmG5BC,E,kDA9Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,UAAW,EACXC,MAAO,GACPC,SAAS,GAGX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBATD,E,2LA3CXC,KAAKC,W,uBACLD,KAAKE,qB,qPAIPC,OAAOC,S,uBACTD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,U,SACxBD,OAAOC,SAASG,S,6BAEfJ,OAAOE,KACdF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKG,iBAGnCL,OAAOM,MAAM,uE,mRAKTJ,EAAOF,OAAOE,K,SAEGA,EAAKK,IAAIC,c,cAA1BC,E,OACAC,EAAUD,EAAS,GACzBZ,KAAKc,SAAS,CAAEpB,QAAUmB,I,SACFR,EAAKK,IAAIK,IAAIC,Q,UAA/BC,E,SACAC,EAAcC,EAAQC,SAASH,I,wBAE7BI,EAAUhB,EAAKK,IAAIY,SAASH,EAAQI,IAAKL,EAAYM,SAC3DxB,KAAKc,SAAS,CAAEO,Y,UACQA,EAAQI,QAAQ9B,YAAY+B,O,QAA9C/B,E,OACNK,KAAKc,SAAS,CAAEnB,cAEPgC,EAAI,E,aAAGA,GAAKhC,G,kCACA0B,EAAQI,QAAQ7B,MAAM+B,GAAGD,O,QAAtCE,E,OACN5B,KAAKc,SAAS,CACZlB,MAAM,GAAD,mBAAMI,KAAKP,MAAMG,OAAjB,CAAwBgC,M,QAHDD,I,wBAMhC3B,KAAKc,SAAS,CAAEjB,SAAS,I,wBAEzBM,OAAOM,MAAM,kD,yJAiBNoB,EAAWC,GAAW,IAAD,OAC9B9B,KAAKc,SAAS,CAAEjB,SAAS,IACzBG,KAAKP,MAAM4B,QAAQI,QAAQ3B,WAAW+B,EAAWC,GAAUC,KAAK,CAAEC,KAAMhC,KAAKP,MAAMC,UAClFuC,KAAK,WAAW,SAACC,GAChB,EAAKpB,SAAS,CAAEjB,SAAS,S,+BAQ7B,OACE,yBAAKsC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,qB,GA9EUC,aCKEC,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a1436cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport { Component } from 'react';\nimport AddData from './abis/AddData.json'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true\n    }\n\n    this.createData = this.createData.bind(this)\n   \n  }\n\n  createData(jsonvalue, identity) {\n    this.setState({ loading: true })\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n\n\n\nrender() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}